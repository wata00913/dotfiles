[[plugins]]
repo = 'junegunn/fzf.vim'
hook_add = '''
let g:fzf_command_prefix = 'Fzf'

function! s:build_quickfix_list(lines) abort
    call setqflist(map(copy(a:lines), '{ "filename": v:val }'))
    copen
    cc
endfunction

function! s:to_lines(qflist) abort
    return map(a:qflist, { _, val -> join(
            \ [bufname(val['bufnr']), val['lnum'], val['text']],
            \ ':')
        \}
    \)
endfunction

function! s:open_selected_line(line) abort
    let parsed = split(a:line, ':')
    let fname = parsed[0]
    execute 'e ' . fname
    call cursor(parsed[1], 1)
endfunction

" ctrl-lは1行を無名レジスタにヤンク
" ctrl-yは複数行をクリップボードにヤンク
let g:fzf_action = {
    \ 'ctrl-t': 'select-all',
    \ 'ctrl-s': 'split',
    \ 'ctrl-e': function('s:build_quickfix_list'),
    \ 'ctrl-l': {lines -> setreg("", substitute(lines[0], "\n", "", "g"))},
    \ 'ctrl-y': {lines -> setreg('*', join(lines, "\n"))}}

function! s:fzf_by_query(type) abort
    let s:query = input('Pattern>')

    let s:commands = {'lines': g:fzf_command_prefix . 'Lines'}
    let s:selected = s:commands[a:type]
    execute(join([s:selected, s:query], ' '))
endfunction

function! s:fzf_git_diff() abort
    execute 'GitGutterQuickFix'
    call fzf#run(fzf#wrap({
        \'source': s:to_lines(getqflist()),
        \'sink': function('s:open_selected_line') }))
endfunction

function! s:fzf_ag_by_query(...) abort
    if a:0 == 0
        let s:query = input('Pattern>')
    elseif a:0 == 1
        let s:query = a:1
    endif
    call fzf#vim#ag(s:query, {'options': '--bind ctrl-a:select-all,ctrl-d:deselect-all'})
endfunction

nnoremap <silent> <Space>uf :FzfFiles<CR>
nnoremap <silent> <Space>ub :FzfBuffers<CR>
nnoremap <silent> <Space>ul :call <SID>fzf_by_query('lines')<CR>
nnoremap <silent> <Space>uw :FzfWindows<CR>
nnoremap <silent> <Space>uh :FzfHistory:<CR>
nnoremap <silent> <Space>u/ :FzfHistory/<CR>
nnoremap <silent> <Space>uc :FzfCommits<CR>
nnoremap <silent> <Space>uv :FzfBCommits<CR>
nnoremap <silent> <Space>ug :call <SID>fzf_ag_by_query()<CR>
nnoremap <silent> <Space>ur :call <SID>fzf_ag_by_query(expand("<cword>"))<CR>
nnoremap <silent> <Space>uu :call <SID>fzf_git_diff()<CR>
'''

# メンテナンスされないためdenops-translate.vimへの移行が必要
[[plugins]]
repo = 'skanehira/translate.vim'

[[plugins]]
repo='deoplete-plugins/deoplete-zsh'
depends = 'deoplete.nvim'
on_ft = 'zsh'
on_event='InsertEnter'

[[plugins]]
repo = 'phaazon/hop.nvim'
hook_source = '''
lua << EOF
require'hop'.setup()
EOF
'''
#hook_sourceでキーマップが定義できないのでhook_addで定義
hook_add='''
nnoremap <silent> <Space>kk :HopWord<CR>
nnoremap <silent> <Space>kp :HopPattern<CR>
nnoremap <silent> <Space>kc :HopChar1<CR>
nnoremap <silent> <Space>kl :HopLine<CR>
'''


#html
[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['css', 'html', 'xhtml', 'php']
hook_source = '''
    let g:user_emmet_mode = 'nv'
    let g:user_emmet_settings = {
        \ 'variables': {
        \ 'lang' : 'ja'
        \}
        \}
'''

# lsp
[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
hook_add= '''
    call coc_settings#run()
'''

# fzf for coc
[[plugins]]
repo = 'antoinemadec/coc-fzf'

[[plugins]]
repo = 'gregsexton/MatchTag'
on_ft = ['html', 'xhtml', 'php']

[[plugins]]
repo = 'SirVer/ultisnips'
on_event = 'InsertEnter'
hook_add = '''
       let g:UltiSnipsExpandTrigger = "<C-t>" 
       let g:UltiSnipsJumpForwardTrigger = "<C-j>"
       let g:UltiSnipsJumpBackwardTrigger= "<C-k>"
       let s:mysnippetsDir = expand(g:conf_dir . '/mycoolsnippets')
       let g:UltiSnipsSnippetDirectories=[s:mysnippetsDir, 'UltiSnips']
       execute 'set runtimepath+=' . s:mysnippetsDir
'''

[[plugins]]
repo = 'godlygeek/tabular'

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = ['markdown']
hook_source = '''
    nnoremap <silent> <Space>mtt :TableFormat<CR>
'''

[[plugins]]
repo = 'iamcco/markdown-preview.nvim'
on_ft = ['markdown']
build = 'cd app & yarn install'
hook_source = '''
    nnoremap [markdownpreview]s :MarkdownPreview<CR>
    nnoremap [markdownpreview]q :MarkdownPreviewStop<CR>
'''
#formatter
[[plugins]]
repo = 'prettier/vim-prettier'
build = 'yarn install'
on_ft = ['php', 'python']

#interactive scratchpad
[[plugins]]
repo = 'metakirby5/codi.vim'
on_ft = ['php', 'javascript', 'python']
hook_add = '''
    function! s:Codi() abort
        let ft_to_ext = {
            \ 'python'     : 'py',
            \ 'javascript' : 'js',
            \ 'php'        : 'php'
        \ }
        execute 'edit $HOME/.codi.' . ft_to_ext[&filetype]
        execute 'Codi'
    endfunction

    command! -nargs=? NewCodi call s:Codi(<f-args>) 
    nnoremap <silent> <Space>cdn :NewCodi<CR>
'''

hook_source = '''
    function! s:codi() abort
        nnoremap <buffer><silent> <Space>cdi :Codi<CR>
        nnoremap <buffer><silent> <Space>cdt :Codi!!<CR>
    endfunction
    augroup my_codi
        autocmd!
        autocmd FileType python,javascript,php call s:codi()
    augroup END
'''

[[plugins]]
repo = 'Shougo/deol.nvim'
if = "has('nvim')"
hook_add = '''
    tnoremap <silent> <C-[> <C-\><C-n>
    nnoremap <silent> <C-m>s :Deol -edit -split=horizontally<CR>
    nnoremap <silent> <C-m>v :Deol -edit -split=vertically<CR>
'''
